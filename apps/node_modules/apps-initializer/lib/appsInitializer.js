/** @module */
'use strict';

const Q = require('q');
const repositoryManager = require('repository-manager');
const resourceTypes = require('resource-types');
const APPLICATIONS_BASE_PATH = "/apps";
const NAME_APPLICATION_INSTALL_FOLDER = "install";
const logger = require('dachshund-logger').getLogger(__filename);
const appsInitializer = exports;
const ncp = require('ncp').ncp;
// Asynchronous recursive file copy utility - Concurrency limit
ncp.limit = 16;

appsInitializer.init = function() {
	const deferred = Q.defer();

	repositoryManager.resolve(APPLICATIONS_BASE_PATH).then(function(applicationsBaseResource) {
		return applicationsBaseResource.getChilds();
	}).then(function(applicationNames) {
		let promisesInitializedApps = [];
		for (let applicationName of applicationNames)
		{
			promisesInitializedApps.push(initApplication(applicationName));
		}
		if (promisesInitializedApps.length == 0)
		{
			logger.warn("No applications found, which is strange since there are system apps which are shipped with Dachshund.");
			deferred.resolve()
		}
		else
		{
			return Q.all(promisesInitializedApps);
		}
	}).then(deferred.resolve).fail(deferred.reject);

	return deferred.promise;
};

const initApplication = function(applicationName) {
	const deferred = Q.defer();
	const applicationInstallPath = APPLICATIONS_BASE_PATH + "/" + applicationName + "/" + NAME_APPLICATION_INSTALL_FOLDER;
	const absoluteApplicationInstallPath = process.cwd() + applicationInstallPath;
	const installPropertiesPath = absoluteApplicationInstallPath + "/.properties.json";
	// The filter ensures that all files except the '.properties.json' in the install folder get copied.
	const ncpFileFilter = function(filePath){
		let copyFile = true;
		if(filePath == installPropertiesPath)
		{
			copyFile = false;
		}
		return copyFile;
	};
	const ncpOptions = {
		filter: ncpFileFilter
	};

	repositoryManager.resolve(applicationInstallPath).then(function(installResource) {
		if (resourceTypes.RESOURCE == installResource.type)
		{
			if (installResource.properties.alreadyInstalled && !installResource.properties.installAlways)
			{
				logger.debug("Application parts from [" + applicationInstallPath + "] already installed.");
				deferred.resolve();
			}
			else
			{
				const relativeApplicationInstallPath = "." + applicationInstallPath;
				const relativeDachshundRoot = "./";
				logger.info("Install application parts from [" + applicationInstallPath + "]");
				ncp(relativeApplicationInstallPath, relativeDachshundRoot, ncpOptions, function(err) {
					if (err)
					{
						deferred.reject(err);
					}
					else
					{
						logger.debug("Applications parts from [" + applicationInstallPath + "] installed");
						installResource.properties.alreadyInstalled = true;
						installResource.saveProperties().then(deferred.resolve).fail(deferred.reject);
					}
				});

			}
		}
	});
	return deferred.promise;
};