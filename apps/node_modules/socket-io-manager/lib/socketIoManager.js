const socketIoManager = exports;
const socketIo = require('dynamic.io');
const assert = require('assert');
const logger = require('dachshund-logger').getLogger(__filename);

var io = null;
var socketIoNamespaces = {};

socketIoManager.init = function(server) {
	io = socketIo(server);
	io.on('connection', function(socket) {
		socket.on('event', function(data) {
			console.log('event');
		});
		socket.on('disconnect', function() {
		});
	});

	io.setupNamespace('*', function(nsp) {
		// Set retirement to set up the number of milliseconds this
		// namespace should hang around after its last socket disconnects.
		// Default is 60 seconds.
		nsp.retirement = Math.max(nsp.retirement, 60 * 1000);
		// Set up the namespace as normal in socket.io.
		nsp.on('connect', function(socket) {
			logger.debug('got a socket connect on', nsp.fullname());
			socketIoNamespaces[nsp.fullname()] = nsp;
			socket.on('disconnect', function() {
				logger.trace('somebody disconnected from', nsp.fullname());
			});
		});
		// Return false from the setupNamespace callback if
		// you want to ignore this namespace.
		return true;
	});
};

socketIoManager.isNamespaceRegistered = function(namespaceName) {
	return socketIoNamespaces[namespaceName] != undefined && socketIoNamespaces[namespaceName] != null;
};

socketIoManager.initNamespace = function(namespaceName) {
	assert(io != null, "Socket io is not initialized. Socket IO instance is 'null'.");
	assert(!socketIoManager.isNamespaceRegistered(namespaceName), "Namespace already registered.");

	var socketIoNamespace = io.of(namespaceName);
	socketIoNamespaces[namespaceName] = socketIoNamespace;
	return socketIoNamespace;
};

socketIoManager.removeNamespace = function(namespaceName) {
	assert(io != null, "Socket io is not initialized. Socket IO instance is 'null'.");
	assert(!socketIoManager.isNamespaceRegistered(namespaceName), "Namespace is not registered.");

	delete socketIoNamespaces[namespaceName];
};

socketIoManager.getNamespace = function(namespaceName) {
	var socketIoNamespace = null;

	if (socketIoManager.isNamespaceRegistered(namespaceName))
	{
		socketIoNamespace = socketIoNamespaces[namespaceName];
	}
	else
	{
		socketIoNamespace = socketIoManager.initNamespace(namespaceName);
	}

	return socketIoNamespace;
};
