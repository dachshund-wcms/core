'use strict';

const Cookies = require('cookies');
const RepositoryManager = require('repository-manager');
const UserSession = require('user-session');
const config = require('config');
const fs = require('fs');
const Q = require('q');
const USER_SESSION_CACHE_PATH = config.get("user.session.localCachePath");
const ANONYMOUS_USER_PATH = config.get("user.session.anonymousUserPath");
const logger = require('dachshund-logger').getLogger(__filename);
require('mkdirp').sync("." + USER_SESSION_CACHE_PATH);

var sessionManager = exports;

var userSessions = {};

sessionManager.lookupSession = function(req, cb) {
	var deferred = Q.defer();

	var cookies = new Cookies(req);
	var sessionID = cookies.get("SESSID");

	if (sessionID != undefined)
	{
		if (userSessions[sessionID] != undefined)
		{
			var session = userSessions[sessionID];
			session.lastAccessed = new Date().getTime();
			deferred.resolve(session);
		}
		else
		{
			var sessionCachePath = "." + USER_SESSION_CACHE_PATH + "/" + sessionID;
			fs.exists(sessionCachePath, function(sessionIsCached) {
				if (sessionIsCached)
				{
					Q.nfcall(fs.readFile, sessionCachePath, "utf-8").then(function(sessionJsonText) {
						try
						{
							var session = JSON.parse(sessionJsonText);
							session.lastAccessed = new Date().getTime();
							deferred.resolve(session);
						} catch (err)
						{
							logger.error("Error while parsing [" + sessionCachePath + "]: " + JSON.stringify(err));
							sessionManager.createAnonymousSession().then(deferred.resolve).fail(deferred.reject);
						}

					}).fail(function(err) {
						logger.error("Error while reading [" + sessionCachePath + "]: " + JSON.stringify(err));
						sessionManager.createAnonymousSession().then(deferred.resolve).fail(deferred.reject);
					});
				}
				else
				{
					sessionManager.createAnonymousSession().then(deferred.resolve).fail(deferred.reject);
				}
			});
		}
	}
	else
	{
		sessionManager.createAnonymousSession().then(deferred.resolve).fail(deferred.reject);
	}
	return deferred.promise;
};

sessionManager.deleteSession = function(req, res) {
	var deferred = Q.defer();
	var cookies = new Cookies(req, res);
	sessionManager.lookupSession(req).then(function(session) {
		if (!session.isAnonymous)
		{
			delete userSessions[session.sessionID];
			cookies.set("SESSID");
		}

		return sessionManager.createAnonymousSession();

	}).then(deferred.resolve).fail(deferred.reject);
	return deferred.promise;
};

sessionManager.createSession = function(req, res, userResource) {
	var deferred = Q.defer();
	var cookies = new Cookies(req, res);
	var userSession = new UserSession(userResource);

	userSessions[userSession.sessionID] = userSession;

	cookies.set("SESSID", userSession.sessionID);

	var sessionCachePath = process.cwd() + USER_SESSION_CACHE_PATH + "/" + userSession.sessionID;
	var userSessionData = JSON.stringify(userSession);
	fs.writeFile(sessionCachePath, userSessionData, function(err){
		if(err)
		{
			deferred.reject(err);
		}
		else
		{
			deferred.resolve(userSession);
		}
	});

	return deferred.promise;
};

sessionManager.createAnonymousSession = function() {
	var deferred = Q.defer();
	RepositoryManager.resolve(ANONYMOUS_USER_PATH).then(function(userResource) {
		deferred.resolve(new UserSession(userResource));
	}).fail(deferred.reject);
	return deferred.promise;
};