'use strict';

const Cookies = require('cookies');
const RepositoryManager = require('repository-manager');
const UserSession = require('user-session');
const config = require('config');
const fs = require('fs-es6-promise');
const Q = require('q');
const USER_SESSION_CACHE_PATH = config.get("user.session.localCachePath");
const ANONYMOUS_USER_PATH = config.get("user.session.anonymousUserPath");
const logger = require('dachshund-logger').getLogger(__filename);
require('mkdirp').sync("." + USER_SESSION_CACHE_PATH);

let sessionManager = exports;

let userSessions = {};

sessionManager.lookupSession = async function(req) {

	let cookies = new Cookies(req);
	let sessionID = cookies.get("SESSID");

	if (sessionID !== undefined)
	{
		if (userSessions[sessionID] !== undefined)
		{
			let session = userSessions[sessionID];
			session.lastAccessed = new Date().getTime();
			return session;
		}
		else
		{
			let sessionCachePath = "." + USER_SESSION_CACHE_PATH + "/" + sessionID;

			let sessionCacheFile = await fs.stat(sessionCachePath);
			if (sessionCacheFile.isFile())
			{
				try
				{
					let sessionJsonText = await fs.readFile(sessionCachePath, "utf-8");
					let session = JSON.parse(sessionJsonText);
					session.lastAccessed = new Date().getTime();
					return session;
				} catch (err)
				{
					logger.error("Error while parsing [" + sessionCachePath + "]: " + JSON.stringify(err));
					return sessionManager.createAnonymousSession();
				}
			}
			else
			{
				return sessionManager.createAnonymousSession();
			}
		}
	}
	else
	{
		return sessionManager.createAnonymousSession();
	}
};

sessionManager.deleteSession = function(req, res) {
	let deferred = Q.defer();
	let cookies = new Cookies(req, res);
	sessionManager.lookupSession(req).then(function(session) {
		if (!session.isAnonymous)
		{
			delete userSessions[session.sessionID];
			cookies.set("SESSID");
		}

		return sessionManager.createAnonymousSession();

	}).then(deferred.resolve).fail(deferred.reject);
	return deferred.promise;
};

sessionManager.createSession = async function(req, res, userResource) {
	let cookies = new Cookies(req, res);
	let userSession = new UserSession(userResource);

	userSessions[userSession.sessionID] = userSession;

	cookies.set("SESSID", userSession.sessionID);

	let sessionCachePath = process.cwd() + USER_SESSION_CACHE_PATH + "/" + userSession.sessionID;
	let userSessionData = JSON.stringify(userSession);

	await fs.writeFile(sessionCachePath, userSessionData);

	return userSession;
};

sessionManager.createAnonymousSession = async function() {
	let userResource = await RepositoryManager.resolve(ANONYMOUS_USER_PATH);
	return new UserSession(userResource);
};