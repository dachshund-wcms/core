'use strict';

const assert = require('assert');
const stringUtils = require('string-utils');
const RepositoryManager = require('repository-manager');
const LocalResource = require('local-resource');
const ResourceTypes = require('resource-types');
const logger = require('dachshund-logger').getLogger(__filename);
const fs = require('fs-es6-promise');
const pathExists = require('path-exists');
const mkdirp = require('mkdirp');

class LocalResourceManager extends RepositoryManager {

	async createEmptyResource(pathInfo) {
		return new LocalResource();
	}

	async createResource(newResourceBasePath, newResourceName) {
		assert(stringUtils.isNotEmpty(newResourceBasePath), 'The "newResourceBasePath" is not defined or empty.');
		assert(stringUtils.isNotEmpty(newResourceName), 'The parameter "newResourceName" is not defined or empty.');

		let newResourcePath = newResourceBasePath + "/" + newResourceName;
		logger.debug(`Create new resource with path: ${newResourcePath}`);

		//Create Resource directory
		let newResourcePathStat = fs.stat('.' + newResourcePath);
		if (!newResourcePathStat.isDirectory())
		{
			mkdirp.sync('.' + newResourcePath);
		}

		let resource = await this.resolve(newResourcePath);
		resource.properties.timeCreated = new Date();
		await resource.saveProperties();

		return resource;
	}

	static determineID(resource) {
		resource.id = resource.properties.id;
		resource.properties.id = undefined;
		return resource;
	}

	async resolve(pathInfo) {
		assert(pathInfo !== undefined, 'Resource with undefined parameter "pathInfo" requested.');

		let resource = new LocalResource();

		if (typeof(pathInfo) === "string" && await pathExists("." + pathInfo))
		{
			resource.path = pathInfo;
			resource.type = ResourceTypes.RESOURCE;
			resource.name = pathInfo.lastSubstringAfter("/");
			await resource.loadProperties();
			LocalResourceManager.determineID(resource);
			await resource.loadAuthorization();
		}
		else if (typeof(pathInfo) === "string" && await pathExists("." + pathInfo))
		{
			resource.type = ResourceTypes.FILE;
			resource.name = pathInfo.lastSubstringAfter("/");
			resource.path = pathInfo;
		}
		else if (await pathExists("." + pathInfo.componentPath))
		{
			resource.type = ResourceTypes.RESOURCE;
			resource.path = pathInfo.componentPath;
			resource.name = pathInfo.componentPath.lastSubstringAfter("/");
			await resource.loadProperties();
			LocalResourceManager.determineID(resource);
			await resource.loadAuthorization();
		}
		else if (await pathExists("." + pathInfo.completePath))
		{
			resource.type = ResourceTypes.FILE;
			resource.name = pathInfo.completePath.lastSubstringAfter("/");
			resource.path = pathInfo.completePath;
		}

		return resource;
	}
}

module.exports = LocalResourceManager;