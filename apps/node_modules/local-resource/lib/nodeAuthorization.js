'use strict';

const fs = require('fs-es6-promise');
const pathExists = require('path-exists');
const logger = require('dachshund-logger').getLogger(__filename);
const AUTH_FILE_NAME = ".auth.json";
const nodeAuthorization = exports;

nodeAuthorization.load = async function(resourcePath) {
	let properties = {allow: {}, deny: {}};

	let nodePropertiesPath = "." + resourcePath + "/" + AUTH_FILE_NAME;

	if (await pathExists(nodePropertiesPath) && (await fs.stat(nodePropertiesPath)).isFile())
	{
		let propertyFileData = await fs.readFile(nodePropertiesPath, 'utf8');
		try
		{
			properties = JSON.parse(propertyFileData);
		} catch (err)
		{
			logger.error("Error while parsing node authorizations '" + nodePropertiesPath + "'. " + err);
		}
	}

	return properties;
};

nodeAuthorization.save = async function(resourcePath, properties) {
	let nodePropertiesPath = "." + resourcePath + "/" + AUTH_FILE_NAME;
	properties.timeLastChange = new Date();

	let propertyFileData = JSON.stringify(properties);

	await fs.writeFile(nodePropertiesPath, propertyFileData, 'utf8');
};
