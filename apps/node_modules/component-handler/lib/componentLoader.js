/** @module component-handler/componentLoader */
'use strict';

require('string-utils');
const Component = require('component');
const Q = require('q');
const repositoryManager = require('repository-manager');
const componentLoader = exports;

/**
 * Loads a components and initialized with the parameters passed in the function parameters. Furthermore it loads
 * the recursively all super components in case its defined.
 * @param {ClientRequest} req
 * @param {ServerResponse} res
 * @param {RequestPathInfo} pathInfo
 * @param {Resource} contentResource
 * @param {Resource} componentResource
 * @returns {promise} resolves with the {@link Component}
 * @alias module:component-handler/componentLoader.load
 */
componentLoader.load = function(req, res, pathInfo, contentResource, componentResource) {
	let deferred = Q.defer();
	let component = new Component(req, res, pathInfo, contentResource, componentResource);

	if (componentResource.properties.superComponent != undefined)
	{
		repositoryManager.resolve(componentResource.properties.superComponent).then(function(superComponentResource) {
			return componentLoader.load(req, res, pathInfo, contentResource, superComponentResource);
		}).then(function(superComponent) {
			component.superComponent = superComponent;
			deferred.resolve(component);
		}).fail(deferred.reject);
	}
	else
	{
		deferred.resolve(component);
	}
	return deferred.promise;
};
