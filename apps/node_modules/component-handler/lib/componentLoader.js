/** @module component-handler/componentLoader */
'use strict';

require('string-utils');
const Component = require('component');
const repositoryManager = require('repository-manager');
const componentLoader = exports;

/**
 * Loads a components and initialized with the parameters passed in the function parameters. Furthermore it loads
 * the recursively all super components in case its defined.
 * @param {ClientRequest} req
 * @param {ServerResponse} res
 * @param {RequestPathInfo} pathInfo
 * @param {Resource} contentResource
 * @param {Resource} componentResource
 * @returns {promise} resolves with the {@link Component}
 * @alias module:component-handler/componentLoader.load
 */
componentLoader.load = async function(req, res, pathInfo, contentResource, componentResource) {
	let component = new Component(req, res, pathInfo, contentResource, componentResource);

	if (componentResource.properties.superComponent !== undefined)
	{
		let superComponentResource = await repositoryManager.resolve(componentResource.properties.superComponent);
		component.superComponent = await componentLoader.load(req, res, pathInfo, contentResource, superComponentResource);
		return component;
	}

	return component;
};
