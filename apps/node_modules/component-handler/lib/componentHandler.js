/** @module component-handler/componentHandler */
'use strict';

const componentHandler = exports;
const logger = require('dachshund-logger').getLogger(__filename);
const assert = require('assert');

const prepareScriptHandler = require('./prepareScriptHandler.js');

/**
 * Processes the component by looking up the script which is matches to the request and to execute the script
 * @param component {Component} The component to be handled with the enclosed request information
 * @returns {promise} resolved when a script could be resolved and executed
 * @alias module:component-handler/componentHandler.handle
 */
componentHandler.handle = async function(component) {

	await prepareScriptHandler.resolveAndHandle(component);

	let scriptPath = null;
	try
	{
		scriptPath = await componentHandler.getScriptToHandle(component);
		logger.trace(`Script [${scriptPath}] found for component [${component.componentResource.path}] ${getPathinfoString(component)}`);
	} catch (err)
	{
		try
		{
			scriptPath = await componentHandler.getScriptToHandle(component, component.componentResource.name);
			logger.trace(`Script [${scriptPath}] found for component [${component.componentResource.path}] with name [${component.componentResource.name}] ${getPathinfoString(component)}`);
		} catch (err)
		{
			scriptPath = await component.getDefaultScript();
			logger.trace(`Default script [${scriptPath}] found for component [${component.componentResource.path}] ${getPathinfoString(component)}`);
		}
	}

	return await component.executeScript(scriptPath);
};

/**
 * Lookup a matching script which is able to handle the request with the speicifed selector and extension in the {@link RequestPathInfo}
 * @param {Component} component - with the enclosed request information
 * @param {string} prefix - will be set in front of the script file name to resolve a possible match
 * @returns {promise} which resolves with the scriptPath {string}
 * @alias module:component-handler/componentHandler.getScriptToHandle
 */
componentHandler.getScriptToHandle = async function(component, prefix) {
	if (prefix === undefined)
	{
		prefix = "";
	}
	else
	{
		prefix = prefix + ".";
	}

	let scriptPath = await resolveScriptByMethodSelectorAndExtension(component, prefix) ||
		await resolveScriptBySelector(component, prefix) ||
		await resolverScriptByExtension(component, prefix) ||
		await resolveScriptByMethodName(component, prefix);

	assert(scriptPath !== null, `No script found for component: ${component.componentResource.path}`);

	return scriptPath;
};

const resolveScriptByMethodName = async function(component, prefix) {
	let scriptName = prefix + component.pathInfo.method;
	try
	{
		return await component.resolveScript(scriptName);
	} catch (err)
	{
		// In case an error occurred or a matching script path couldn't be resolved.
		return null;
	}
};

const resolverScriptByExtension = async function(component, prefix) {
	if (component.pathInfo.method === "GET" && component.pathInfo.selector === null)
	{
		let scriptName = prefix + component.pathInfo.extension;
		try
		{
			return await component.resolveScript(scriptName);
		} catch (err)
		{
			// In case an error occurred or a matching script path couldn't be resolved.
			return null;
		}
	}

	return null;
};

const resolveScriptBySelector = async function(component, prefix) {
	if (component.pathInfo.method === "GET" && component.pathInfo.selector !== null)
	{
		let scriptName = prefix + component.pathInfo.selector;
		try
		{
			return await component.resolveScript(scriptName);
		} catch (err)
		{
			// In case an error occurred or a matching script path couldn't be resolved.
			return null;
		}
	}

	return null;
};

const resolveScriptByMethodSelectorAndExtension = async function(component, prefix) {
	let scriptName = "";

	if (component.pathInfo.method === "GET" && component.pathInfo.selector === null)
	{
		scriptName = prefix + component.pathInfo.extension;
	}
	else if (component.pathInfo.method === "GET" && component.pathInfo.selector !== null)
	{
		scriptName = prefix + component.pathInfo.selector + "." + component.pathInfo.extension;
	}
	else if (component.pathInfo.selector === null)
	{
		scriptName = prefix + component.pathInfo.method + "." + component.pathInfo.extension;
	}
	else if (component.pathInfo.selector !== null)
	{
		scriptName = prefix + component.pathInfo.method + "." + component.pathInfo.selector + "." + component.pathInfo.extension;
	}

	try
	{
		return await component.resolveScript(scriptName);
	} catch (err)
	{
		// In case an error occurred or a matching script path couldn't be resolved.
		return null;
	}
};

const getPathinfoString = function(component) {
	return ` request method [${component.pathInfo.method}] selector [${component.pathInfo.selector}] extension [${component.pathInfo.extension}]`;
};
