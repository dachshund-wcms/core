/** @module component-handler/prepareScriptHandler */
'use strict';

const Q = require('q');
const logger = require('dachshund-logger').getLogger(__filename);
const prepareScriptHandler = exports;

/**
 * @const
 * @type {number}
 */
const ELEMENT_NOT_FOUND = -1;

/**
 * A component resource may have a file called 'prepare.js'. This file is executed prior to the component script which
 * is lookup up based on the {@link RequestPathInfo}. The prepare script is able to enhance the component and enclosed
 * resource with further information which processed during runtime.
 * @param component - component as base to lookup the prepare script of this and all super components
 * @returns {promise} resolves when no prepare could be found or all found prepare scripts are executed succesful
 * @alias module:component-handler/prepareScriptHandler.resolveAndHandle
 */
prepareScriptHandler.resolveAndHandle = function(component) {
	let deferred = Q.defer();
	// Step 1: Lookup the prepare script of the component and all super components
	// This promise fails when no prepare script could be found
	prepareScriptHandler.resolvePrepareScripts(component).then(function(prepareScriptList) {
		let prepareScriptPromises = [];
		//Step 2: Execute them and collect the promises
		prepareScriptList.forEach(function(prepareScript) {
			prepareScriptPromises.push(component.executeScript(prepareScript));
		});
		logger.trace(prepareScriptList.length + " prepare script for component [" + component.componentResource.path + "] processed");
		//Step 3: Wait until all prepare scripts are executed or one failed
		Q.all(prepareScriptPromises).then(deferred.resolve).fail(function(error){
			logger.error("Error while executing prepare script ["+ error.toString() +"]");
			deferred.reject();
		});
	}).fail(function() {
		logger.trace("No prepare script for component [" + component.componentResource.path + "]");
		deferred.resolve();
	});
	return deferred.promise;
};

/**
 *
 * @param {Component} component
 * @param {string[]} prepareScripts
 * @returns {promise} resolved with
 */
prepareScriptHandler.resolvePrepareScripts = function(component, prepareScripts) {
	let deferred = Q.defer();
	let self = this;

	if (prepareScripts == undefined)
	{
		prepareScripts = [];
	}

	component.resolveScript("prepare", true, "js").then(function(prepareScript) {
		if (prepareScript != null && prepareScripts.indexOf(prepareScript) == ELEMENT_NOT_FOUND)
		{
			prepareScripts.push(prepareScript);
		}

		if (component.superComponent != null)
		{
			self.resolvePrepareScripts(component.superComponent, prepareScripts).then(deferred.resolve);
		}
		else
		{
			deferred.resolve(prepareScripts);
		}
	}).fail(function() {
		if (prepareScripts.length == 0) //The component has no prepare scripts, reject the further processing
		{
			deferred.reject();
		}
		else //The component has no further prepare script then the ones which are already found
		{
			deferred.resolve(prepareScripts);
		}
	});
	return deferred.promise;
};