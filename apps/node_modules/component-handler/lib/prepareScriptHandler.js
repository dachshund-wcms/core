/** @module component-handler/prepareScriptHandler */
'use strict';

const logger = require('dachshund-logger').getLogger(__filename);
const prepareScriptHandler = exports;

/**
 * @const
 * @type {number}
 */
const ELEMENT_NOT_FOUND = -1;

/**
 * A component resource may have a file called 'prepare.js'. This file is executed prior to the component script which
 * is lookup up based on the {@link RequestPathInfo}. The prepare script is able to enhance the component and enclosed
 * resource with further information which processed during runtime.
 * @param component - component as base to lookup the prepare script of this and all super components
 * @returns {promise} resolves when no prepare could be found or all found prepare scripts are executed succesful
 * @alias module:component-handler/prepareScriptHandler.resolveAndHandle
 */
prepareScriptHandler.resolveAndHandle = async function(component) {
	// Step 1: Lookup the prepare script of the component and all super components
	// This promise fails when no prepare script could be found
	let prepareScriptList = await prepareScriptHandler.resolvePrepareScripts(component);

	let prepareScriptPromises = [];
	//Step 2: Execute them and collect the promises
	prepareScriptList.forEach(function(prepareScript) {
		prepareScriptPromises.push(component.executeScript(prepareScript));
	});
	await Promise.all(prepareScriptPromises);

	logger.trace(`${prepareScriptList.length} prepare script for component [${component.componentResource.path}] processed.`);
};

/**
 *
 * @param {Component} component
 * @param {string[]} prepareScripts
 * @returns {promise} resolved with
 */
prepareScriptHandler.resolvePrepareScripts = async function(component, prepareScripts) {
	if (prepareScripts === undefined)
	{
		prepareScripts = [];
	}

	try
	{
		let prepareScript = await component.resolveScript("prepare", true, "js");
		if (prepareScript !== null && prepareScripts.indexOf(prepareScript) === ELEMENT_NOT_FOUND)
		{
			prepareScripts.push(prepareScript);
		}

		if (component.superComponent !== null)
		{
			await this.resolvePrepareScripts(component.superComponent, prepareScripts);
		}
	} catch (err)
	{
		// Suppress errors
	}
	return prepareScripts;
};