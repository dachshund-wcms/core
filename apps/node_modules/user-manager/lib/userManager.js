'use strict';

const RepositoryManager = require('repository-manager');
const Q = require('q');
const ResourceTypes = require('resource-types');
const crypto = require('crypto');
const logger = require('dachshund-logger').getLogger(__filename);
const path = require('path');
const stringUtils = require('string-utils');
const config = require('config');

const USERS_DIRECTORY = config.get("user.usersDirectory").endsWith("/") ? config.get("user.usersDirectory") : config.get("user.usersDirectory") + "/";
const GROUPS_DIRECTORY = config.get("user.groupsDirectory").endsWith("/") ? config.get("user.groupsDirectory") : config.get("user.groupsDirectory") + "/";
const PASSWORD_SALT = config.get("user.passwordSalt");

const getPasswordShaSum = function(password) {
	let passwordHash = "";
	if (password != undefined)
	{
		let shasum = crypto.createHash('sha256');
		shasum.update(PASSWORD_SALT + password);
		passwordHash = shasum.digest('hex');
	}
	return passwordHash;
};

const userManager = exports;
userManager.load = function(username) {
	let deferred = Q.defer();
	let userResourcePath = USERS_DIRECTORY + username;
	RepositoryManager.resolve(userResourcePath, function(userResource) {
		if (ResourceTypes.RESOURCE.equals(userResource.type))
		{
			deferred.resolve(userResource);
		}
		else
		{
			deferred.resolve(null);
		}
	});
	return deferred.promise;
};

userManager.getUserList = function() {
	let deferred = Q.defer();
	RepositoryManager.resolve(USERS_DIRECTORY, function(usersResource) {
		usersResource.getChilds(function(userChilds) {
			let userPaths = [];
			for (let userChild of userChilds)
			{
				userPaths.push(USERS_DIRECTORY + userChild);
			}
			userPaths.sort();

			deferred.resolve(userPaths);
		});
	});
	return deferred;
};

userManager.changePassword = function(username, password) {
	let deferred = Q.defer();
	userManager.load(username).then(function(userResource) {
		if (userResource == null)
		{
			deferred.reject("User [" + username + "] not found.");
		}
		else
		{
			userResource.properties.passwordHash = getPasswordShaSum(password);
			userResource.saveProperties().then(function() {
				deferred.resolve(userResource);
			}).fail(deferred.reject);
		}
	});
	return deferred.promise;
};

userManager.createGroup = function(groupID, groupName, groupDescription) {
	let deferred = Q.defer();

	let groupPath = GROUPS_DIRECTORY + groupID;
	RepositoryManager.createResource(groupPath).then(function(groupResource) {
		groupResource.properties.type = "group";
		groupResource.properties.name = groupName;
		groupResource.properties.description = groupDescription;
		groupResource.saveProperties().then(function() {
			deferred.resolve(groupResource);
		});
	}).fail(deferred.reject);

	return deferred.promise;
};

userManager.createUser = function(username, password) {
	let deferred = Q.defer();

	userManager.load(username).then(function(userResource) {
		if (userResource == null)
		{
			let userResourcePath = USERS_DIRECTORY + username;
			RepositoryManager.createResource(userResourcePath).then(function(userResource) {
				userResource.properties.type = "user";
				userResource.saveProperties().then(function() {
					if (stringUtils.isNotEmpty(password))
					{
						userManager.changePassword(username, password).then(function() {
							deferred.resolve(userResource);
						}).fail(deferred.reject);
					}
					else
					{
						deferred.resolve(userResource);
					}

				}).fail(deferred.reject);
			});
		}
		else
		{
			deferred.resolve(userResource);
		}
	});

	return deferred.promise;
};

userManager.authenticate = function(username, password) {
	let deferred = Q.defer();
	userManager.load(username).then(function(userResource) {

		let passwordHash = getPasswordShaSum(password);

		let userAuthenticated = userResource != null && userResource.properties.passwordHash != undefined && userResource.properties.passwordHash == passwordHash;

		if (userAuthenticated)
		{
			deferred.resolve(userResource);
		}
		else
		{
			deferred.resolve(null);
		}

	}).fail(deferred.reject);
	return deferred.promise;
};

Object.freeze(userManager);
