'use strict';

const Q = require('q');
const logger = require('dachshund-logger').getLogger(__filename);
const assert = require('assert');
const componentScriptHandler = require('component-script-handler');

class Component {

	/**
	 * A component is a bundle of data, logic and request information to process it and return the result in the response
	 *
	 * @param {ClientRequest} req
	 * @param {ServerResponse} res
	 * @param {RequestPathInfo} pathInfo
	 * @param {Resource} contentResource - the content resource which contains the data to be procssed
	 * @param {Resource} componentResource -  the component resource which  which contains the logic to process the data
	 */
	constructor(req, res, pathInfo, contentResource, componentResource) {
		/**
		 * @type {ClientRequest}
		 */
		this.req = req;

		/**
		 * @type {ServerResponse}
		 */
		this.res = res;

		/**
		 * @type {RepositorySession}
		 */
		this.session = req.session;

		/**
		 * @type {RequestPathInfo}
		 */
		this.pathInfo = pathInfo;

		/**
		 * The content resource which is assigned to be processed whith this component
		 * @type {Resource}
		 */
		this.resource = contentResource;

		/**
		 * The component resource which is defined on the property {@link Component.resource.properties.componentPath} and which is aimed to process the content resource
		 * @type {Resource}
		 */
		this.componentResource = componentResource;

		/**
		 * Parent component of this component
		 * @type {Component}
		 */
		this.superComponent = null;
	};

	/**
	 * Executes a script from the {@link Component.componentResource} or {@link Component.superComponent}
	 * @param {string} scriptName - name of the script which shall be executed from {@link Component.componentResource}
	 * @param {string} [scriptExtension] - file extension of the script
	 * @param {Object[]} [parameter] - additional parameters which are passed on to the script handler
	 * @returns {promise} resolves when the script is handled
	 */
	executeScript(scriptName, scriptExtension, parameter) {
		let deferred = Q.defer();
		let self = this;
		let scriptPath = scriptName;

		const handleScript = function(scriptPath, parameter) {
			assert(scriptPath != null, "There is no script with the name '" + scriptName + "' within this or the parent components.");
			let scriptExtension = scriptPath.lastSubstringAfter(".");
			let scriptHandler = componentScriptHandler.getScriptHandler(scriptPath.lastSubstringAfter("."));
			assert(scriptHandler != undefined, "Script handler for extension '" + scriptExtension + "'");
			logger.trace("Execute script [" + scriptPath + "] with scriptHandler [" + scriptHandler.extension + "]");
			Q(scriptHandler.handle(self, scriptPath, parameter)).then(deferred.resolve).fail(deferred.reject);
		};

		if (scriptName != null && !scriptName.startsWith("/"))
		{
			this.resolveScript(scriptName, true, scriptExtension).then(function(scriptPath) {
				handleScript(scriptPath, parameter);
			}).fail(deferred.reject);
		}
		else
		{
			handleScript(scriptPath, parameter);
		}

		return deferred.promise;
	};

	/**
	 * Look up the default script of the component. The default script matches with name of the component.
	 * @returns {promise} resolves the path {@link string} of the script inside the context of the application server
	 */
	getDefaultScript() {
		let deferred = Q.defer();
		let self = this;
		this.resolveScript(self.componentResource.name, false).then(deferred.resolve).fail(function() {
			if (self.superComponent != null)
			{
				self.superComponent.getDefaultScript().then(deferred.resolve).fail(deferred.reject);
			}
			else
			{
				deferred.reject();
			}
		});
		return deferred.promise;
	};

	/**
	 * Resolves script file from {@link Component.componentResource} or recursive from {@link Component.superComponent.componentResource}
	 * @param {string} scriptName - name of the script which shall be executed from {@link Component.componentResource}
	 * @param recursive {boolean} - true: if the script cannot be resolved in the {@link Component.componentResource} the search is continued with the {@link Component.superComponent}; false: the lookup is limited to the {@link Component.componentResource} see true case
	 * @param {string} [extension] - file extension of the script
	 * @returns {promise} resolves the path of the script {@link string} inside the context of the application server
	 */
	resolveScript(scriptName, recursive, extension) {
		let deferred = Q.defer();
		let self = this;

		self.componentResource.getFiles().then(function(componentResourceFiles) {
			let scriptPath = null;

			componentResourceFiles.forEach(function(componentResourceFile) {
				let scriptNameMatch = componentResourceFile.lastSubstringBefore(".") == scriptName;
				let isNotATemporaryFile = !componentResourceFile.endsWith("~");
				let extensionMatch = (extension == undefined || componentResourceFile.lastSubstringAfter(".") == extension);

				if (scriptNameMatch && extensionMatch && isNotATemporaryFile)
				{
					scriptPath = self.componentResource.path + "/" + componentResourceFile;
				}
			});

			if (recursive == undefined)
			{
				recursive = true;
			}

			if (recursive && scriptPath == null && self.superComponent != null)
			{
				self.superComponent.resolveScript(scriptName, recursive, extension).then(deferred.resolve).fail(deferred.reject);
			}
			else if (scriptPath != undefined || scriptPath != null)
			{
				deferred.resolve(scriptPath);
			}
			else
			{
				deferred.reject(new Error("No matching script found with script name [" + scriptName + "], extension [" + extension + "] recursive execution [" + recursive + "] for component [" + self.path + "]"));
			}
		}).fail(deferred.reject);

		return deferred.promise;
	};
}

module.exports = Component;