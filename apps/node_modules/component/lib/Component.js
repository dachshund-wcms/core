'use strict';

const logger = require('dachshund-logger').getLogger(__filename);
const assert = require('assert');
const componentScriptHandler = require('component-script-handler');
const stringUtils = require('string-utils');

class Component {

	/**
	 * A component is a bundle of data, logic and request information to process it and return the result in the response
	 *
	 * @param {ClientRequest} req
	 * @param {ServerResponse} res
	 * @param {RequestPathInfo} pathInfo
	 * @param {Resource} contentResource - the content resource which contains the data to be procssed
	 * @param {Resource} componentResource -  the component resource which  which contains the logic to process the data
	 */
	constructor(req, res, pathInfo, contentResource, componentResource) {
		/**
		 * @type {ClientRequest}
		 */
		this.req = req;

		/**
		 * @type {ServerResponse}
		 */
		this.res = res;

		/**
		 * @type {RepositorySession}
		 */
		this.session = req.session;

		/**
		 * @type {RequestPathInfo}
		 */
		this.pathInfo = pathInfo;

		/**
		 * The content resource which is assigned to be processed whith this component
		 * @type {Resource}
		 */
		this.resource = contentResource;

		/**
		 * The component resource which is defined on the property {@link Component.resource.properties.componentPath} and which is aimed to process the content resource
		 * @type {Resource}
		 */
		this.componentResource = componentResource;

		/**
		 * Parent component of this component
		 * @type {Component}
		 */
		this.superComponent = null;
	};

	/**
	 * Executes a script from the {@link Component.componentResource} or {@link Component.superComponent}
	 * @param {string} scriptName - name of the script which shall be executed from {@link Component.componentResource}
	 * @param {string} [scriptExtension] - file extension of the script
	 * @param {Object[]} [parameter] - additional parameters which are passed on to the script handler
	 * @returns {promise} resolves when the script is handled
	 */
	async executeScript(scriptName, scriptExtension, parameter) {
		let self = this;
		let scriptPath = scriptName;

		const handleScript = function(scriptPath, parameter) {
			assert(scriptPath !== null, `There is no script with the name [${scriptName}] within this or the parent components.`);
			let scriptExtension = scriptPath.lastSubstringAfter(".");
			let scriptHandler = componentScriptHandler.getScriptHandler(scriptExtension);
			assert(scriptHandler !== undefined, `No script handler for script extension [${scriptExtension}] found.`);
			logger.trace(`Execute script [${scriptPath}] with scriptHandler [${scriptHandler.extension}]`);
			let scriptPromise = scriptHandler.handle(self, scriptPath, parameter);
			// Handle ES6 Promises
			if (scriptPromise instanceof Promise)
			{
				return scriptPromise;
			}
			// Handle all non promise script handler
			else if (scriptPromise === undefined || stringUtils.isNotEmpty(scriptPromise))
			{
				return Promise.resolve(scriptPromise);
			}
			// Handle all non ES6 Promise promises
			else if (scriptPromise['then'] !== undefined && scriptPromise['fail'] !== undefined)
			{
				return new Promise((resolve, reject) => {
					scriptPromise.then(resolve).fail(reject);
				});
			}
			else
			{
				throw new Error(`Unknown script promise for handler with extension [${scriptExtension}] and script path [${scriptPath}]`);
			}
		};

		if (scriptName !== null && !scriptName.startsWith("/"))
		{
			let scriptPath = await this.resolveScript(scriptName, true, scriptExtension);
			return await handleScript(scriptPath, parameter);
		}
		else
		{
			return await handleScript(scriptPath, parameter);
		}
	};

	/**
	 * Look up the default script of the component. The default script matches with name of the component.
	 * @returns {promise} resolves the path {@link string} of the script inside the context of the application server
	 */
	async getDefaultScript() {
		try
		{

			return await this.resolveScript(this.componentResource.name, false);

		} catch (err)
		{
			if (this.superComponent !== null)
			{
				return await this.superComponent.getDefaultScript();
			}
			else
			{
				throw new Error(`No default script found for component ${this.componentResource.path}`);
			}
		}
	};

	/**
	 * Resolves script file from {@link Component.componentResource} or recursive from {@link Component.superComponent.componentResource}
	 * @param {string} scriptName - name of the script which shall be executed from {@link Component.componentResource}
	 * @param recursive {boolean} - true: if the script cannot be resolved in the {@link Component.componentResource} the search is continued with the {@link Component.superComponent}; false: the lookup is limited to the {@link Component.componentResource} see true case
	 * @param {string} [extension] - file extension of the script
	 * @returns {promise} resolves the path of the script {@link string} inside the context of the application server
	 */
	async resolveScript(scriptName, recursive, extension) {
		recursive = recursive || true;
		let self = this;

		let componentResourceFiles = await this.componentResource.getFiles();

		let scriptPath = null;

		componentResourceFiles.forEach(componentResourceFile => {
			let scriptNameMatch = componentResourceFile.lastSubstringBefore(".") === scriptName;
			let extensionMatch = (extension === undefined || componentResourceFile.lastSubstringAfter(".") === extension);
			let isNotATemporaryFile = !componentResourceFile.endsWith("~");

			if (scriptNameMatch && extensionMatch && isNotATemporaryFile)
			{
				scriptPath = self.componentResource.path + "/" + componentResourceFile;
			}
		});

		if (recursive && scriptPath === null && this.superComponent !== null)
		{
			return this.superComponent.resolveScript(scriptName, recursive, extension)
		}
		else if (scriptPath !== null)
		{
			return scriptPath;
		}
		else
		{
			throw new Error(`No matching script found with script name [${scriptName}], extension [${extension}] recursive execution [${recursive}] for component [${this.componentResource.path}]`);
		}
	};
}

module.exports = Component;