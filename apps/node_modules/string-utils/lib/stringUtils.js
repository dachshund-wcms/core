/** @module string-utils */
'use strict';

String.prototype.trim = function() {
	return this.replace(/^\s+|\s+$/, '');
};

String.prototype.fulltrim = function() {
	return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g, '').replace(/\s+/g, ' ');
};

String.prototype.startsWith = function(str) {
	return this.indexOf(str) == 0;
};

String.prototype.endsWith = function(str) {
	return this.slice(-str.length) == str;
};

String.prototype.contains = function(searchStr) {
	return this.indexOf(searchStr) != -1
};

String.prototype.lastSubstringBefore = function(seperator) {
	var seperatorPosition = this.lastIndexOf(seperator);
	if (seperatorPosition == -1)
	{
		return this;
	}
	else
	{
		return this.substr(0, seperatorPosition + seperator.length - 1)
	}
};

String.prototype.substringBefore = function(seperator) {
	var seperatorPosition = this.indexOf(seperator);
	if (seperatorPosition == -1)
	{
		return this;
	}
	else
	{
		return this.substr(0, seperatorPosition + seperator.length - 1)
	}
};

String.prototype.lastSubstringAfter = function(seperator) {
	var seperatorPosition = this.lastIndexOf(seperator);
	if (seperatorPosition == -1)
	{
		return this;
	}
	else
	{
		return this.substr(seperatorPosition + seperator.length)
	}
};

String.prototype.substringAfter = function(seperator) {
	var seperatorPosition = this.indexOf(seperator);
	if (seperatorPosition == -1)
	{
		return null;
	}
	else
	{
		return this.substr(seperatorPosition + seperator.length)
	}
};

String.prototype.substringBetween = function(seperatorStart, seperatorEnd) {
	let separatorStartPosition = this.indexOf(seperatorStart);
	let separatorEndPosition = this.indexOf(seperatorEnd);
	if (separatorStartPosition == -1)
	{
		return null;
	}
	else
	{
		return this.substring(seperatorStart.length, separatorEndPosition);
	}
};

String.prototype.replaceAll = function(searchString, replaceWith) {
	return this.split(searchString).join(replaceWith)
};

/**
 * Checks weather the parameter is a string or not
 * @param {String} stringValue value to be evaluated
 * @returns {boolean} true - parameter is a string; false - otherwise
 */
exports.isString = function(stringValue) {
	return stringValue != undefined && stringValue != null && stringValue instanceof String;
};

/**
 * Checks weather the value is undefined, null, instance of a string and if the string contains values
 * @param {String} stringValue value to be evaluated
 * @returns {boolean} true - when the object is undefined, null, not a String or string has no values; false - when the string has characters
 */
exports.isEmpty = function(stringValue) {
	return stringValue == undefined || stringValue == null || stringValue instanceof String || stringValue.length == 0;
};

/**
 * This function returns the inverse result then the 'isEmpty' function
 * @param {String} stringValue
 * @returns {boolean} true - when the string has characters; false - when the object is undefined, null, not a String or string has no values
 */
exports.isNotEmpty = function(stringValue) {
	return !exports.isEmpty(stringValue);
};