/**
 * is an ENUM and represents the different resource types
 */
class ResourceTypes {

	constructor(name)
	{
		this.name = name;
		Object.freeze(this);
	}

	/**
	 * Compare two {@link ResourceTypes}
	 * @param otherResourceType other resource type to be compared
	 * @returns {boolean} true: resource types are the same, false: otherwise
	 */
	equals(otherResourceType) {
		return otherResourceType instanceof ResourceTypes && otherResourceType.name == this.name;
	}

	/**
	 * Checks if the reference is {@link ResourceTypes.NOT_FOUND}
	 * @returns {boolean} true - when the {@link ResourceTypes} is {@link ResourceTypes.NOT_FOUND}
	 */
	isNotFound() {
		return this.name === ResourceTypes.NOT_FOUND.name;
	}

	/**
	 * Static method to check if a resource type is from type file
	 * @param {ResourceTypes} resource - to be checked
	 * @returns {boolean} true: when the {@link ResourceTypes} is {@link ResourceTypes.FILE}
	 */
	static isFile(resource) {
		return resource instanceof Object && ResourceTypes.FILE.name === resource.type;
	};

	/**
	 * Static method to check if a resource type is from type resource
	 * @param {ResourceTypes} resource - to be checked
	 * @returns {boolean} true: when the {@link ResourceTypes} is {@link ResourceTypes.RESOURCE}
	 */
	static isResource(resource) {
		return resource instanceof Object && ResourceTypes.RESOURCE.name === resource.type;
	};
}

/**
 * Resource is a file
 * @type {ResourceTypes}
 */
ResourceTypes.FILE = new ResourceTypes('file');

/**
 * Resource is a resource
 * @type {ResourceTypes}
 */
ResourceTypes.RESOURCE = new ResourceTypes('resource');

/**
 * Resource couldn't be resolved because it cannot be found
 * @type {ResourceTypes}
 */
ResourceTypes.NOT_FOUND = new ResourceTypes('not-found');

//Freeze the object to prevent that it get's modified somewhere else
Object.freeze(ResourceTypes);

module.exports = ResourceTypes;