'use strict';

const repositoryManager = require('repository-manager');
const repositorySecurityManager = require('repository-security-manager');
const resourceTypes = require('resource-types');
const logger = require('dachshund-logger').getLogger(__filename);
const asyncUtils = require('async-utils');

const secureResourceManager = exports;

secureResourceManager.secureResource = async function(resource, userSession) {
	if (resource.type === resourceTypes.RESOURCE)
	{
		resource._user = userSession;

		resource.isAuthorized = function(type) {
			return repositorySecurityManager.userIsAuthorized(this._authorizationList, this._user, type);
		};

		resource._authorizationList = await repositorySecurityManager.getAuthorizationList(resource);

		if (!resource.isAuthorized("read"))
		{
			logger.warn("'" + userSession.user.path + "' has no read access to '" + resource.path + "'");
			return await repositoryManager.createEmptyResource(resource.path);
		}
		else
		{
			resource.getChildResources = secureResourceManager_getChildResources;

			if (!resource.isAuthorized("modify"))
			{
				resource.saveProperties = function() {
					throw new Error("User is not authorized to modify properties of: " + this.path);
				}
			}
			else
			{
				resource._saveProperties = resource.saveProperties;
				resource.saveProperties = function() {
					resource.properties.modifiedBy = this._user.user.name;
					return this._saveProperties();
				};
			}

			if (!resource.isAuthorized("modAuth"))
			{
				resource.saveAuthorization = function() {
					throw new Error("User is not authorized to modify the resource authorization of: " + this.path);
				}
			}
		}
	}

	return resource;
};

const secureResourceManager_getChildResources = async function() {
	let self = this;
	let childNames = await this.getChilds();

	if(childNames.length === 0)
	{
		return [];
	}

	return await asyncUtils.forEachParallel(childNames, async childName => {
		let childResourcePath = self.path + "/" + childName;
		let childResource = await repositoryManager.resolve(childResourcePath);
		return await secureResourceManager.secureResource(childResource, self._user);
	});
};