'use strict';

const repositoryManager = require('repository-manager');
const secureResourceManager = require('./secureResourceManager.js');

/**
 * @example
 * prepare.handle = function(req, res, pathInfo, resource, component) {
    const deferred = Q.defer();

	resolveHomepage(resource).then(function(){
		return resolveSubHeadings(req.session, resource);
	}).then(deferred.resolve).fail(deferred.reject);

    return deferred.promise;
};
 *
 * @extends RepositoryManager
 *
 */
class RepositorySession {

	/**
	 * Creates a repository session based on the provided user session. Requests executed with the object will incorporate the access rights of the referenced {@link UserSession}.
	 * @param {UserSession} userSession - The user session which is applied to evaluate if the user has access rights.
	 */
	constructor(userSession) {
		this.user = userSession;
	}

	/**
	 * @inheritDoc
	 */
	createEmptyResource(pathInfo) {
		return repositoryManager.createEmptyResource(pathInfo);
	};

	/**
	 * @inheritDoc
	 */
	createResource(newResourceBasePath, newResourceName) {
		return repositoryManager.createResource(newResourceBasePath, newResourceName);
	};

	/**
	 * @inheritDoc
	 */
	async resolve(pathInfo) {
		let sessionUser = this.user;
		let resource = await repositoryManager.resolve(pathInfo);
		return await secureResourceManager.secureResource(resource, sessionUser);
	};
}


module.exports = RepositorySession;