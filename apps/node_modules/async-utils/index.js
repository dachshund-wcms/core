'use strict';

const assert = require('assert');

const asyncUtils = exports;

asyncUtils.forEachSequential = async function(array, functionToBeApplied) {
	assert(functionToBeApplied instanceof Function, 'The second parameter has to be a function.');

	let resultArray = [];

	if (Array.isArray(array))
	{
		for (let arrayElement of array)
		{
			let possiblePromise = functionToBeApplied(arrayElement);
			if (possiblePromise instanceof Promise)
			{
				resultArray.push(await possiblePromise);
			}
		}
	}

	return resultArray;
};

/**
 *
 * @param array
 * @param functionToBeApplied
 * @returns {Promise}
 */
asyncUtils.forEachParallel = function(array, functionToBeApplied) {
	assert(functionToBeApplied instanceof Function, 'The second parameter has to be a function.');

	if (Array.isArray(array))
	{
		let arrayPromises = [];

		for(let arrayElement of array)
		{
			let possiblePromise = functionToBeApplied(arrayElement);
			if (possiblePromise instanceof Promise)
			{
				arrayPromises.push(possiblePromise);
			}
		}

		if (arrayPromises.length > 0)
		{
			return Promise.all(arrayPromises);
		}
		else
		{
			return Promise.resolve([]);
		}
	}
	else
	{
		return Promise.resolve([]);
	}
};