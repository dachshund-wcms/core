/** @module file-script-handler/imageExifHandler */
'use strict';

require('string-utils');
const fs = require('fs');
const im = require('imagemagick');
const path = require("path");
const nodeStatic = require('node-static');
const qs = require('querystring');
const childProcess = require('child_process');
const logger = require('dachshund-logger').getLogger(__filename);
const DachshundError = require('dachshund-error');
const geocoder = require('geocoder');
const resourceTypes = require('resource-types');
const imageExifHandler = exports;
const repositoryManager = require('repository-manager');
const Q = require('q');
const sha256 = require('sha256');
const temp = require("temp").track();

let fileServer = new nodeStatic.Server({cache: false});

let pathToExifTool = null;
if (fs.existsSync("/usr/bin/exiftool"))
{
	pathToExifTool = "/usr/bin/exiftool";
}
else if (fs.existsSync("/usr/local/bin/exiftool"))
{
	pathToExifTool = "/usr/local/bin/exiftool";
}
else
{
	logger.error("Path to command line tool [exiftool] could not be found.");
}

imageExifHandler.test = function(pathInfo) {
	let extension = pathInfo.extension.toLowerCase();

	if (pathInfo.selector == null)
	{
		return false;
	}

	let selectorParts = pathInfo.selector.split(".");
	let greatestSelectorPart = selectorParts[selectorParts.length - 1].toLowerCase();

	return (greatestSelectorPart == "jpg" || greatestSelectorPart == "jpeg") && extension == "json";
};

imageExifHandler.handle = function(req, resp, pathInfo) {
	let selectorParts = pathInfo.selector.split(".");

	if (selectorParts.length > 2 && selectorParts[selectorParts.length - 3] == "min" || selectorParts[selectorParts.length - 3] == "max")
	{
		selectorParts.splice(selectorParts.length - 3, 1);
	}

	if (selectorParts.length > 1 && selectorParts[selectorParts.length - 2].contains("x"))
	{
		selectorParts.splice(selectorParts.length - 2, 1);
	}
	let selector = selectorParts.join(".");

	let imagePath = pathInfo.componentPath + "." + selector;

	req.session.resolve(imagePath).then(function(imageResource) {
		let deferred = Q.defer();
		if (resourceTypes.isFile(imageResource))
		{
			let imageSourcePath = imagePath;
			if (imageResource.source != undefined)
			{
				imageSourcePath = imageResource.source;
			}

			if (pathInfo.method == "GET")
			{
				processRequestReadExifData(req, resp, pathInfo, imagePath, imageSourcePath).fail(deferred.reject);
			}
			else if (pathInfo.method == "POST")
			{
				processRequestModifyExifData(req, resp, pathInfo, imagePath, imageSourcePath).fail(deferred.reject);
			}
			else
			{
				deferred.reject(new DachshundError("The selected method cannot be handled", 500));
			}
		}
		else
		{
			deferred.reject(new DachshundError("The selected source file does not exist", 404));
		}
		return deferred.promise;
	}).fail(function(err) {
		resp.writeHead(err.id || 500, {"Content-Type": "text/plain; charset=utf-8"});
		resp.write(err.toString());
		resp.end();
	});
};

const processRequestModifyExifData = function(req, resp, pathInfo, imagePath, imageSourcePath) {
	let deferred = Q.defer();
	let imageFolder = imagePath.lastSubstringBefore("/");
	let imageName = imagePath.lastSubstringAfter("/");
	let imageMetaName = "." + imageName + ".exif.json";

	req.session.resolve(imageFolder, function(imageFolderResource) {
		if (!imageFolderResource.isAuthorized("modify"))
		{
			deferred.reject(new DachshundError("You're not authorized to modify image exif data.", 401));
		}
		else
		{
			let body = '';
			req.on('data', function(data) {
				body = body + data;
			});
			req.on('end', function() {

				let postParameters = qs.parse(body);
				let imageDescription = postParameters.imageDescription;

				if (imageDescription == undefined)
				{
					deferred.reject(new DachshundError("The parameter 'imageDescription' is undefined in the post request.", 500));
				}
				else
				{
					processImageDescription(imageSourcePath, imageDescription).then(function() {
						return repositoryManager.resolve(imageFolder);
					}).then(function(imageFolderResource) {
						let deferred = Q.defer();
						let imageReadStream = fs.createReadStream("." + imageSourcePath);
						imageFolderResource.addFile(imageReadStream, imageName).then(function() {
							deferred.resolve(imageFolderResource);
						}).fail(deferred.reject);
						return deferred.promise;
					}).then(function(imageFolderResource) {
						let deferred = Q.defer();
						imageFolderResource.fileExists(imageMetaName).then(function(fileExists) {
							if (fileExists)
							{
								imageFolderResource.deleteFile(imageMetaName).then(deferred.resolve).fail(deferred.reject);
							}
							else
							{
								deferred.resolve(undefined);
							}
						});
						return deferred.promise;
					}).then(function() {
						processRequestReadExifData(req, resp, pathInfo, imagePath, imageSourcePath);
					}).fail(deferred.reject);
				}
			});
		}
	});
	return deferred.promise;
};

const processRequestReadExifData = function(req, resp, pathInfo, imagePath, imageSourcePath) {
	let deferred = Q.defer();
	let imageFolder = imagePath.lastSubstringBefore("/");
	let imageName = imagePath.lastSubstringAfter("/");
	let imageMetaName = "." + imageName + ".exif.json";
	let imageMetaPath = imageFolder + "/" + imageMetaName;

	repositoryManager.resolve(imageMetaPath).then(function(imageMetaResource) {
		let deferred = Q.defer();
		if (resourceTypes.isFile(imageMetaResource))
		{
			let imageExifFilePath = "." + imageMetaResource.source || imageMetaPath;
			fileServer.serveFile(imageExifFilePath, 200, {"content-type": "application/json; charset=utf-8"}, req, resp);
		}
		else
		{
			Q.nfcall(im.readMetadata, process.cwd() + imageSourcePath).then(function(metadata) {
				if (metadata.exif != undefined)
				{
					metadata = metadata.exif;
					//Reset senseless and cluttered exif properties
					delete metadata.makerNote;
					delete metadata.userComment;

					processImageDescription(imageSourcePath).then(function(imageDescription) {
						metadata.imageDescription = imageDescription;

						return processGpsData(metadata);
					}).then(function(gpsPosition) {
						metadata.gpsPosition = gpsPosition;

						return Q.nfcall(temp.open, sha256(imageMetaPath));
					}).then(function(tempInfo) {
						let deferred = Q.defer();
						let exifDataString = JSON.stringify(metadata);
						fs.writeFile(tempInfo.path, exifDataString, function() {
							deferred.resolve(tempInfo);
						});
						return deferred.promise;
					}).then(function(tempInfo) {
						let deferred = Q.defer();
						let exifTempFile = fs.createReadStream(tempInfo.path);
						repositoryManager.resolve(imageFolder).then(function(imageFolderResource) {
							return imageFolderResource.addFile(exifTempFile, imageMetaName);
						}).then(deferred.resolve).fail(deferred.reject);
						return deferred.promise;
					}).then(function() {
						processRequestReadExifData(req, resp, pathInfo, imagePath);
					}).fail(deferred.reject);
				}
				else
				{
					let metadata = {
						imageDescription: ""
					};

					Q.nfcall(temp.open, sha256(imageMetaPath)).then(function(tempInfo) {
						let deferred = Q.defer();
						let exifDataString = JSON.stringify(metadata);
						fs.writeFile(tempInfo.path, exifDataString, function() {
							deferred.resolve(tempInfo);
						});
						return deferred.promise;
					}).then(function(tempInfo) {
						let exifTempFile = fs.createReadStream(tempInfo.path);
						return imageMetaResource.addFile(exifTempFile, imageMetaName);
					}).then(function() {
						processRequestReadExifData(req, resp, pathInfo, imagePath);
					}).fail(deferred.reject);
				}
			}).fail(deferred.reject);
		}
		return deferred.promise;
	});

	return deferred.promise;
};

const processImageDescription = function(imagePath, description) {
	let writeDescription = (description !== undefined && description !== null);
	let spawn = childProcess.spawn;
	let processArguments = ["-T", "-ImageDescription", process.cwd() + imagePath];
	if (writeDescription)
	{
		processArguments = ["-codedcharacterset=UTF8", "-overwrite_original", "-Exif:ImageDescription=" + description, process.cwd() + imagePath]
	}
	let child = spawn(pathToExifTool, processArguments);
	let stdout = '';
	let stderr = '';
	child.stdout.setEncoding('utf8');
	child.stdout.on('data', function(buf) {
		stdout += buf.toString();
	});
	child.stderr.on('data', function(buf) {
		stderr += buf.toString();
	});
	return new Promise(resolve => {
		child.on('close', function(code) {
			if (code !== 0)
			{
				logger.error(`Error while executing exiftool. Exit code [${code}] with error message: ${stderr}`);
				resolve();
			}
			else
			{
				stdout = stdout.replaceAll("\n", "");

				if (writeDescription)
				{
					stdout = description;
				}
				else if (stdout === "-")
				{
					stdout = "";
				}
				resolve(stdout);
			}
		});
	});
};

const processGpsData = function(exifData) {
	let deferred = Q.defer();
	if (exifData.gpsLatitude === undefined || exifData.gpsLatitudeRef === undefined || exifData.gpsLongitude === undefined || exifData.gpsLongitudeRef === undefined)
	{
		deferred.resolve(undefined);
	}
	else
	{
		let altitude = 0.0;
		if (exifData.gpsAltitude !== undefined)
		{
			let stringAltitude = exifData.gpsAltitude.split("/");
			altitude = parseFloat(stringAltitude[0]) / parseFloat(stringAltitude[1]);
		}

		let latitude = convertToDegree(exifData.gpsLatitude);
		if (exifData.gpsLatitudeRef !== "N")
		{
			latitude = 0 - latitude;
		}

		let longitude = convertToDegree(exifData.gpsLongitude);
		if (exifData.gpsLongitudeRef !== "E")
		{
			longitude = 0 - convertToDegree(exifData.gpsLongitude);
		}

		//Check the plausibility of the calculated data.
		//If all values are zero it can't be an official position.
		if (latitude === 0 && longitude === 0 && altitude === 0)
		{
			logger.warn("The gps position isn't plausable and won't be persisted.");
			deferred.resolve(undefined);
		}
		else
		{
			let location = {
				"latitude": latitude,
				"longitude": longitude,
				"altitude": altitude
			};

			resolveGeoLocation(location).then(function(geolocation) {
				location.geolocation = geolocation;
				deferred.resolve(location);
			});
		}
	}

	return deferred.promise;
};

const resolveGeoLocation = function(location) {
	let deferred = Q.defer();
	if (location !== undefined)
	{
		Q.nfcall(geocoder.reverseGeocode, location.latitude, location.longitude, {language: 'de'}).then(function(data) {
			deferred.resolve(data.results[0].formatted_address);
		}).fail(function(err) {
			logger.warn("The gps position isn't plausible and won't be persisted.");
			deferred.resolve("");
		});
	}
	else
	{
		deferred.resolve("");
	}
	return deferred.promise;
};

const convertToDegree = function(stringDMS) {
	let result = 0;
	let DMS = stringDMS.split(",");

	let stringDegree = DMS[0].split("/");
	let floatDegree = parseFloat(stringDegree[0]) / parseFloat(stringDegree[1]);

	let stringMinutes = DMS[1].split("/");
	let floatMinutes = parseFloat(stringMinutes[0]) / parseFloat(stringMinutes[1]);

	let stringSeconds = DMS[2].split("/");
	let floatSeconds = parseFloat(stringSeconds[0]) / parseFloat(stringSeconds[1]);

	return floatDegree + (floatMinutes / 60) + (floatSeconds / 3600);
};