'use strict';

const repositoryWatcher = require('repository-watcher');
const installFileModifiedWatcher = {};
const logger = require('dachshund-logger').getLogger(__filename);
const isInInstallFolderRegex = /^(\/apps\/[^\/]+\/install)\/.*/;
const isInInstallFolderPropertiesRegex = /^(\/apps\/[^\/]+\/install)\/\.properties/;
const repositoryManager = require('repository-manager');
const mkdirp = require('mkdirp');
const fs = require('fs-es6-promise');
const rmdir = require('rimraf');

installFileModifiedWatcher.test = function(filePath) {
	return isInInstallFolderRegex.test(filePath) && !isInInstallFolderPropertiesRegex.test(filePath) && !filePath.contains('bower_components');
};

const handleCopyFile = async function(filePath) {
	let applicationInstallPath = isInInstallFolderRegex.exec(filePath)[1];

	let fileStat = await fs.lstat('.' + filePath);
	let filePathIsDirectory = fileStat.isDirectory();
	let applicationInstallResource = await repositoryManager.resolve(applicationInstallPath);

	if (applicationInstallResource.properties.installAlways === true || applicationInstallResource.properties.alreadyInstalled === false)
	{
		let destinationPath = filePath.substring(applicationInstallPath.length);
		if (filePathIsDirectory)
		{
			mkdirp('.' + destinationPath, function(error) {
				if (error)
				{
					logger.error('Couldn\'t create folder: ' + destinationPath + ' because of ' + error.toString());
				}
				else
				{
					logger.trace("Created folder: " + destinationPath);
				}
			});
		}
		else
		{
			let destinationFolder = destinationPath.lastSubstringBefore('/');
			if (destinationFolder.length === 0)
			{
				fs.createReadStream('.' + filePath).pipe(fs.createWriteStream('.' + destinationPath));
			}
			else
			{
				mkdirp('.' + destinationFolder, function(error) {
					if (error)
					{
						logger.error('Couldn\'t create folder: ' + destinationPath + ' because of ' + err.toString());
					}
					else
					{
						fs.createReadStream('.' + filePath).pipe(fs.createWriteStream('.' + destinationPath));
						logger.trace("Copied file: " + filePath);
					}
				});
			}
		}
	}
};

const handleDeleteFile = async function(filePath) {
	let applicationInstallPath = isInInstallFolderRegex.exec(filePath)[1];
	let applicationInstallResource = await repositoryManager.resolve(applicationInstallPath);

	if (applicationInstallResource.properties.installAlways === true || applicationInstallResource.properties.alreadyInstalled === false)
	{
		let destinationPath = filePath.substring(applicationInstallPath.length);
		await new Promise((resolve, reject) => {
			rmdir('.' + destinationPath, err => {
				if (err)
				{
					reject(err);
				}
				else
				{
					resolve();
				}
			});
		});
	}
};

installFileModifiedWatcher.handle = function(filePath, fileDeleted) {
	if (fileDeleted)
	{
		handleDeleteFile(filePath).catch(err => {
			logger.error(`Error while handling deleting file action for [${filePath}]`, err);
		});
	}
	else
	{
		handleCopyFile(filePath).catch(err => {
			logger.error(`Error while handling copy file action for [${filePath}]`, err);
		});
	}
};

repositoryWatcher.addWatcher(installFileModifiedWatcher);