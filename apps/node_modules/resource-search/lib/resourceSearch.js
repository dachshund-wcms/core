'use strict';

const logger = require('dachshund-logger').getLogger(__filename);
const resourceTypes = require('resource-types');
const resourceSearch = exports;
const assert = require('assert');
const Q = require('q');

resourceSearch.search = function(parentResource, resourceMatchFunction, maxDepth, includeHiddenResources, foundResources, depth) {
	const deferred = Q.defer();

	foundResources = foundResources || [];
	depth = depth || 0;
	includeHiddenResources = includeHiddenResources || false;

	assert(resourceMatchFunction instanceof Function, "Parameter resourceMatchFunction is not a function");
	assert(parentResource.type == resourceTypes.RESOURCE, "The resource '" + parentResource.path + "' is not a resource.");

	parentResource.getChildResources(includeHiddenResources).then(function(childResources) {
		if (childResources.length == 0)
		{
			deferred.resolve(foundResources);
		}
		else
		{
			const searchedChildResourcePromises = [];
			for (let childResource of childResources)
			{
				if (resourceMatchFunction(childResource, depth))
				{
					foundResources.push(childResource);
				}

				if (maxDepth == undefined || maxDepth < 1 || depth < maxDepth)
				{
					searchedChildResourcePromises.push(resourceSearch.search(childResource, resourceMatchFunction, maxDepth, includeHiddenResources, foundResources, depth + 1));
				}
			}
			if(searchedChildResourcePromises.length > 0)
			{
				Q.all(searchedChildResourcePromises).then(function(){
					deferred.resolve(foundResources);
				});
			}
			else
			{
				deferred.resolve(foundResources);
			}
		}
	});

	return deferred.promise;
};
