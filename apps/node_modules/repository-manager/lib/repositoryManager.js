'use strict';

const logger = require('dachshund-logger').getLogger(__filename);
const Resource = require('resource');
const config = require('config');
const assert = require('assert');
const RequestPathInfo = require('request-pathinfo');
const stringUtils = require('string-utils');
const Q = require('q');

var resolvedRepositoryManager = {};

var resolveRepositoryManager = function(pathInfo){

	//Extract the selected resource path from the 'pathInfo' parameter
	assert(pathInfo != undefined, 'The parameter "pathInfo" is not defined.');
	var selectedResourcePath = null;
	if(pathInfo instanceof RequestPathInfo)
	{
		selectedResourcePath = pathInfo.componentPath;
	}
	else if(stringUtils.isNotEmpty(pathInfo))
	{
		selectedResourcePath = pathInfo;
	}
	assert(stringUtils.isNotEmpty(selectedResourcePath), "The resource path to be checked is not defined.");

	//Lookup resource manager which is able to resolve the resource path
	var repositoryManagerPathSelector=  config.get('repositoryManager.repositoryManagerPathSelector');
	var selectedRepositoryManager = null;
	for(var repositoryManager of repositoryManagerPathSelector)
	{
		assert(stringUtils.isNotEmpty(repositoryManager.path), "One repository manager from the config 'repositoryManager.repositoryManagerPathSelector' has no path defined.");

		if(repositoryManager.pathRegex == undefined)
		{
			repositoryManager.pathRegex = new RegExp(repositoryManager.path);
		}

		if(repositoryManager.path.match(repositoryManager.pathRegex))
		{
			selectedRepositoryManager = repositoryManager;
			break;
		}
	}
	assert(selectedRepositoryManager != null, 'It wasn\'t possible to find a matching repository manager');

	//Load the selected resource manager and store it on the map 'resolvedRepositoryManager' to create a singleton and
	//reloading on the next access
	if(resolvedRepositoryManager[selectedRepositoryManager.path] == undefined)
	{
		let repositoryManagerModule = require(selectedRepositoryManager.nodeModule);
		resolvedRepositoryManager[selectedRepositoryManager.path] = new repositoryManagerModule();
	}
	let loadedRepositoryManager = resolvedRepositoryManager[selectedRepositoryManager.path];

	return loadedRepositoryManager;
};

class RepositoryManager {

	createEmptyResource(pathInfo) {
		return Q(new Resource());
	}

	createResource(newResourceBasePath, newResourceName) {
		return Q(new Resource());
	}

	resolve(pathInfo) {
		return Q(new Resource());
	}

	static createEmptyResource(pathInfo) {
		return resolveRepositoryManager(pathInfo).createEmptyResource(pathInfo);
	}

	static createResource(newResourceBasePath, newResourceName) {
		return resolveRepositoryManager(newResourceBasePath).createResource(newResourceBasePath, newResourceName);
	}

	static resolve(pathInfo) {
		return resolveRepositoryManager(pathInfo).resolve(pathInfo);
	}
}

module.exports = RepositoryManager;