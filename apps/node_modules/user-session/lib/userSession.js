'use strict';

const config = require('config');
const ANONYMOUS_USER_PATH = config.get("user.session.anonymousUserPath");

class UserSession {

	/**
	 * Creates a user session to apply them
	 * @constructor
	 * @param {Resource} userResource - the resource which represents the object of the users home in /home/users/&lt;johndoe>
	 * @param {string} [sessionID] - Random string like an UUID to identify the user session. Parameter is optional and will be created in case the user is not anonymous.
	 */
	constructor(userResource, sessionID) {
		/**
		 * Flag to identify if this user session is based on the anonymous user, which means the user is not authenticated.
		 * @type {boolean}
		 */
		this.isAnonymous = true;

		/**
		 * Random string like an UUID to identify the user session. Parameter is optional and will be created in case the user is not anonymous. This parameter is used to set the SESSID cookie and resolve the user on subsequent requests.
		 * @type {string}
		 */
		this.sessionID = null;

		/**
		 * The resource which represents the object of the users home in /home/users/&lt;username>
		 * @type {Resource}
		 */
		this.user = userResource;

		/**
		 * Date of time the user session was created
		 * @type {Date}
		 */
		this.sessionCreated = null;

		/**
		 * Date of time the user session was accessed the last time
		 * @type {Date}
		 */
		this.lastAccessed = null;

		if (this.user != undefined && this.user != null)
		{
			this.isAnonymous = this.user.path == ANONYMOUS_USER_PATH;
		}

		if (!this.isAnonymous)
		{
			this.sessionID = sessionID != undefined ? sessionID : randomString(256);
			this.sessionCreated = new Date().getTime();
			this.lastAccessed = new Date().getTime();
		}
	}
}

module.exports = UserSession;

// randomString returns a pseude-random ASCII string which contains at least the specified number of bits of entropy
// the return value is a string of length âŒˆbits/6âŒ‰ of characters from the base64 alphabet
const randomString = function(bits) {
	var chars, rand, i, ret;
	chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	ret = '';
	// in v8, Math.random() yields 32 pseudo-random bits (in spidermonkey it gives 53)
	while (bits > 0)
	{
		rand = Math.floor(Math.random() * 0x100000000); // 32-bit integer
		// base 64 means 6 bits per character, so we use the top 30 bits from rand to give 30/6=5 characters.
		for (i = 26; i > 0 && bits > 0; i -= 6, bits -= 6) ret += chars[0x3F & rand >>> i]
	}
	return ret;
};