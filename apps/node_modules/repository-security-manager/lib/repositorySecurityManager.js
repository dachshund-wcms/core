'use strict';

const sets = require('simplesets');
const logger = require('dachshund-logger').getLogger(__filename);

const securityManager = exports;

securityManager.types = {
	none: "none", read: "read", modify: "modify", create: "create", modAuth: "modAuth", delete: "delete", all: "all"
};

securityManager.userIsAuthorized = function(authorizationList, user, type) {
	return checkAuthorization(authorizationList.allow, authorizationList.deny, user, type);
};

securityManager.getAuthorizationList = async function(resource) {
	let allowList = {};
	let denyList = {};

	await loadAuthorizationList(resource, allowList, denyList);
	return {
		allow: allowList,
		deny: denyList
	}
};

const loadAuthorizationList = async function(resource, allowList, denyList) {
	if (resource.auth !== undefined && resource.auth !== null)
	{
		fillAuthList(resource.auth.allow, allowList);
		fillAuthList(resource.auth.deny, denyList);
	}

	if (resource.depth > 2)
	{
		let parentResource = await resource.getParentResource();
		await loadAuthorizationList(parentResource, allowList, denyList);
	}
};

const fillAuthList = function(authFromResource, authList) {
	if (authFromResource !== undefined)
	{
		for (let auth in authFromResource)
		{
			let authSetFromResource = new sets.Set(authFromResource[auth]);
			if (authList[auth] === undefined)
			{
				authList[auth] = authSetFromResource;
			}
			else
			{
				authList[auth] = authList[auth].union(authSetFromResource);
			}
		}
	}
};

const checkAuthorization = function(allowList, denyList, userSession, type) {
	let userIsAuthorized = false;
	let user = userSession.user;

	let userAuthList = new sets.Set(user.properties.groups);
	userAuthList.add(user.path);
	userAuthList.add("/home/groups/everyone");

	switch (type)
	{
		case securityManager.types.read:
			if (allowList.read !== undefined && allowList.read.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = true;
				break;
			}
		case securityManager.types.modify:
			if (allowList.modify !== undefined && allowList.modify.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = true;
				break;
			}
		case securityManager.types.create:
			if (allowList.create !== undefined && allowList.create.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = true;
				break;
			}
		case securityManager.types.delete:
			if (allowList.delete !== undefined && allowList.delete.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = true;
				break;
			}
		case securityManager.types.modAuth:
			if (allowList.modAuth !== undefined && allowList.modAuth.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = true;
				break;
			}
		case securityManager.types.all:
			if (allowList.all !== undefined && allowList.all.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = true;
				break;
			}
	}

	switch (type)
	{
		case securityManager.types.read:
			if (denyList.read !== undefined && denyList.read.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = false;
				break;
			}
		case securityManager.types.modify:
			if (denyList.modify !== undefined && denyList.modify.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = false;
				break;
			}
		case securityManager.types.create:
			if (denyList.create !== undefined && denyList.create.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = false;
				break;
			}
		case securityManager.types.delete:
			if (denyList.delete !== undefined && denyList.delete.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = false;
				break;
			}
		case securityManager.types.modAuth:
			if (denyList.modAuth !== undefined && denyList.modAuth.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = false;
				break;
			}
		case securityManager.types.all:
			if (denyList.all !== undefined && denyList.all.intersection(userAuthList).size() > 0)
			{
				userIsAuthorized = false;
				break;
			}
	}

	return userIsAuthorized;
};
