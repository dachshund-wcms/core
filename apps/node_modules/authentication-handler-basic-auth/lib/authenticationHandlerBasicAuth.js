/** @module authentication-handler-basic-auth */
'use strict';

const userManager = require('user-manager');
const sessionManager = require('user-session-manager');
const RepositorySession = require('repository-session');
const config = require('config');
const allowAnonymousUser = config.get('user.session.allowAnonymousUser');

const basicAuthenticationHandler = exports;

/**
 * Extract basic authentication header from http request object
 * @param {Object} req http request object
 * @returns {{username: *, password: *}}
 */
const extractCredentials = function(req) {

	let header = req.headers['authorization'] || '',      // get the header
		token = header.split(/\s+/).pop() || '',          // and the encoded auth token
		auth = new Buffer(token, 'base64').toString(),    // convert from base64
		parts = auth.split(/:/),                          // split on colon
		username = parts[0], password = parts[1];

	return {
		username: username, password: password
	}
};
basicAuthenticationHandler.extractCredentials = extractCredentials;

/**
 * Checks weather the authorization header is set in the http request
 * @param req http request object
 * @returns {boolean} true - when header is set | false - otherwise
 */
const authenticationHeaderIsSet = function(req) {
	return req.headers['authorization'] !== undefined;
};

basicAuthenticationHandler.authenticationHeaderIsSet = authenticationHeaderIsSet;

basicAuthenticationHandler.checkAndAuthenticateUser = async function(req, res) {

	if (authenticationHeaderIsSet(req) && req.userSession.isAnonymous)
	{
		let credentials = extractCredentials(req);
		let userResource = await userManager.authenticate(credentials.username, credentials.password);
		if (userResource !== null)
		{
			let userSession = await sessionManager.createSession(req, res, userResource);

				req.userSession = userSession;
				req.session = new RepositorySession(userSession);
		}
	}

	if(!allowAnonymousUser)
	{
		throw new Error('unknown user');
	}

};



