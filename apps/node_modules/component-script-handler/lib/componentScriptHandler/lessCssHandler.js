'use strict';

const Q = require('q');
const fs = require('fs');
const less = require('less');
const logger = require('dachshund-logger').getLogger(__filename);

const lessCssHandler = exports;

lessCssHandler.extension = "less";

lessCssHandler.handle = function(component, scriptPath) {
	let deferred = Q.defer();
	fs.readFile(process.cwd() + scriptPath, 'utf8', function(err, lessFileContent) {

		let parser = new (less.Parser)({
									   paths: lessCssHandler.getSearchPaths(component)
								   });

		let compressCssOutput = false;
		if (component.resource.properties.minimized != undefined)
		{
			compressCssOutput = component.resource.properties.minimized;
		}

		try
		{
			parser.parse(lessFileContent, function(err, tree) {
				if (err)
				{
					let message = "Error while processing less stylesheet at line " + err.line + " with message: '" + err.message + "' because of '" + err.type + "'\nOrigin:\n" + err.filename + "\nDetails:\n" + err.extract.join("\n");
					deferred.reject(new Error(message));
				}
				else
				{
					let cssData = tree.toCSS({ compress: compressCssOutput });
					deferred.resolve(cssData);
				}
			});
		} catch (err)
		{
			let message = "Error while processing less stylesheet at line " + err.line + " with message: '" + err.message + "' because of '" + err.type + "'\nOrigin:\n" + err.filename + "\nDetails:\n" + err.toString();
			deferred.reject(new Error(message));
		}

	});
	return deferred.promise;
};

lessCssHandler.getSearchPaths = function(component, componentPaths) {
	if (componentPaths == undefined)
	{
		componentPaths = [];
	}

	componentPaths.push(process.cwd() + component.componentResource.path);

	if (component.superComponent != null)
	{
		lessCssHandler.getSearchPaths(component.superComponent, componentPaths);
	}

	return componentPaths;
};
