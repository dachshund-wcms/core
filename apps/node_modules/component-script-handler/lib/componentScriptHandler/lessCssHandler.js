'use strict';

const fs = require('fs-es6-promise');
const less = require('less');
const logger = require('dachshund-logger').getLogger(__filename);

const lessCssHandler = exports;

lessCssHandler.extension = "less";

let getAllComponentResourcePaths = function(component, componentPaths) {
	componentPaths = componentPaths || [];
	componentPaths.push(process.cwd() + component.componentResource.path);
	if (component.superComponent !== null)
	{
		getAllComponentResourcePaths(component.superComponent, componentPaths);
	}
	return componentPaths;
};

lessCssHandler.handle = async function(component, scriptPath) {

	let lessFileContent = await fs.readFile(process.cwd() + scriptPath, 'utf8');

	let compressCssOutput = false;
	if (component.resource.properties.minimized !== undefined)
	{
		compressCssOutput = component.resource.properties.minimized;
	}

	let paths = getAllComponentResourcePaths(component);

	let lessRenderOptions = {
		paths: paths,
		compress: compressCssOutput
	};

	return await new Promise((resolve, reject) => {
		try
		{
			less.render(lessFileContent, lessRenderOptions)
			.then(function(output) {
					  resolve(output.css);
				  },
				  function(err) {
					  let errExtract = err.extract.join("\n");
					  let message = `Error while processing less stylesheet at line ${err.line} with message: '${err.message}' because of ${err.type}'\nOrigin:\n ${err.filename}\nDetails:\n" + ${errExtract}`;
					  reject(new Error(message));
				  });
		} catch (err)
		{
			err.message = `Error while processing less stylesheet at line ${err.line} with message: '${err.message}' because of '${err.type}'\nOrigin:\n ${err.filename}\nDetails:\n ${err}`;
			reject(err);
		}
	});
};

lessCssHandler.getSearchPaths = function(component, componentPaths) {
	if (componentPaths === undefined)
	{
		componentPaths = [];
	}

	componentPaths.push(process.cwd() + component.componentResource.path);

	if (component.superComponent !== null)
	{
		lessCssHandler.getSearchPaths(component.superComponent, componentPaths);
	}

	return componentPaths;
};
