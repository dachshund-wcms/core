'use strict';

const javascriptHandler = exports;
const logger = require('dachshund-logger').getLogger(__filename);

javascriptHandler.extension = "js";

function isFunction(functionToCheck) {
	let getType = {};
	return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

javascriptHandler.handle = async function(component, scriptPath, parameter) {
	let script = null;
	try
	{
		script = require(process.cwd() + scriptPath);

		try
		{
			if (!(script.handle instanceof Function))
			{
				logger.error(`The script [${scriptPath}] has no method handle.`);
			}
			else
			{

			}
			let possiblePromise = script.handle(component.req, component.res, component.pathInfo, component.resource, component);
			if (possiblePromise instanceof Promise)
			{
				await possiblePromise;
			}
			else if (possiblePromise !== undefined && isFunction(possiblePromise['then']) && isFunction(possiblePromise['fail']))
			{
				await new Promise((resolve, reject) => {
					possiblePromise.then(resolve).fail(reject);
				});
			}
		}
		catch (err)
		{
			logger.error(`Error while executing script [${scriptPath}]`, err);
		}
	}
	catch (err)
	{
		logger.error(`Error while including script [${scriptPath}]`, err);
	}

};
