/**
 * The Jazz handler handles all HTML templates with the file extension *.jazz. The source and documentation of the templating engine can be found here {@link https://github.com/shinetech/jazz}. The templating engine makes it possible to write html code and to enhance it with place holder, conditions, loops and further predefined javascript methods. Since this handle is executed in a context of a component, it provides access to resource its properties but also to include further scripts from component resource or to include other resources. In addition to the standard functions defined in the jazz documentation the following additional functioanlity is provided:
 *
 * ### Access Content Resource Property
 * ```html
 * Hello {properties.yourFirstName} you age is {properties.age}
 *
 * <!-- Access a property from the resource of the component trough a method -->
 * <!-- define a default value, which is uses in case the property doesn't exists -->
 * Hello {getProperty('yourName', 'John Doe')} you age is {getProperty('age', 42)}
 * ```
 *
 * ### Conditional Statements
 * ```
 * {if properties.yourFirstName}
 * 	Hello, {properties.yourFirstName}
 * {end}
 *
 * <!-- with else clause -->
 * {if properties.yourFirstName}
 * 	Hello, {properties.yourFirstName}
 * {else}
 *  Hello Anonymous
 * {end}
 *
 * <!-- or with else if -->
 * {if properties.yourFirstName}
 * 	Hello, {properties.yourFirstName}
 * {elif properties.yourLastName}
 *  Hello, Mr. {properties.yourLastName}
 * {else}
 *  Hello Anonymous
 * {end}
 *
 * <!-- with logical expressions -->
 * {if properties.yourFirstName and properties.yourLastName}
 *  Hello {properties.yourFirstName} {properties.yourLastName}
 * {end}
 *
 * {if properties.usesATablet or properties.usesASmartphone}
 *  You access the site with a mobile device.
 * {end}
 *
 * {if not properties.driversLicence}
 *  You are not allowed to drive a car.
 * {end}
 *
 * <!-- comparing two values with eq (equals) or neq (not equals) -->
 * {if properties.gender eq 'male'}
 *	Hello, Mr. {properties.yourLastName}
 * {end}
 *
 * {if properties.status neq 'offline'}
 *	You're online!
 * {end}
 * ```
 *
 * ### Looping Over an Object
 * ```
 * {foreach childPage in properties.chilePages}
 *  <p><a href='{childPage.path}.html'>{childPage.name}</a></p>
 * {end}
 *
 * <!-- using counters / index -->
 * {foreach childPage in properties.chilePages}
 *  <p><a href='{childPage.path}.html'>{childPage.name}</a></p>
 *  <p>Loop number (1 based): {__count}</p>
 *  <p>Index (0 based): {__index}</p>
 * {end}
 * ```
 *
 * ### Include Script from Component Resource
 * The result will be added into the calling jazz file. The execution takes place in the same context.
 * ```
 * {includeScript('nameOfTheOtherScriptInComponentResource.jazz')}
 * ```
 *
 * ### Include Components <a name="includeComponent"></a>
 * ```
 * <!-- The path can be relative or absolute. -->
 * {includeComponent('footer')}
 * {includeComponent('./footer')}
 * {includeComponent('../parentPath')}
 * {includeComponent('/complete/path/to/other/contentResource')}
 *
 * <!-- It is also possible to define the component resource which shall be taken. In this case the defined -->
 * <!-- 'resourcePath' property on the content resource will be ignored -->
 * {includeComponent('footer', '/apps/myApp/footer')}
 *
 * <!-- When the component provides different renditions depending on the selector, the selector can be passed on -->
 * <!-- as well, to provide for example overview, detail or edit view with one component -->
 * {includeComponent('footer', '/apps/myApp/footer', 'compact')}`
 * ```
 *
 * ### Further Utility Functions
 * ```
 * <!-- Furthermore some methods are provided to utilize the templating process -->
 *
 * <!-- Use translation with nodejs module i18n -->
 * {i18n(variableOrStringToBeTranslated)}
 *
 * <!-- Check if in an element from an array is the last one, returns true if this is the case -->
 * {isLastElement(arrayToBeChecked, elementFromArray)}
 *
 * <!-- Negates an boolean value -->
 * {isNot(booleanVariable)}
 *
 * <!-- Checks if a variable is undefined and return true if this th case -->
 * {isUndefined(variableToBeChecked)}
 *
 * <!-- Checks if a variable is defined returns true if this is the case -->
 * {isDefined(variableToBeChecked)}
 *
 * <!-- Escapes special charactors in a string -->
 * {escape(stringToBeEscaped)}`
 * ```
 *
 * @module component-script-handler/jazzHandler
 */
'use strict';

require('string-utils');
const Q = require('q');
const fs = require('graceful-fs');
const jazz = require("jazz");
const dispatcher = require('component-handler');
const escape = require("html-escape");
const logger = require('dachshund-logger').getLogger(__filename);

const jazzHandler = exports;

jazzHandler.extension = "jazz";

jazzHandler.handle = function(component, scriptPath, parameter) {
	let deferred = Q.defer();

	Q.nfapply(fs.readFile, [process.cwd() + scriptPath, {encoding: 'utf8'}]).then(function(jazzTemplate) {
		logger.trace("Handling jazz file [" + scriptPath + "]");
		return jazzHandler.handleJazzTemplate(component, jazzTemplate, parameter);
	}).then(deferred.resolve).fail(deferred.reject);

	return deferred.promise;
};

jazzHandler.handleJazzTemplate = function(component, jazzTemplate, parameter) {
	let deferred = Q.defer();
	let templateParameters = {
		"i18n": component.res.__,
		"includeComponent": function(path, componentPath, selector, cb) {
			if (cb != undefined && selector != undefined)
			{
				jazzHandler.includeComponent(path, componentPath, cb, component, selector);
			}
			else if (cb == undefined && selector != undefined)
			{
				cb = selector;
				jazzHandler.includeComponent(path, componentPath, cb, component);
			}
			else
			{
				cb = componentPath;
				componentPath = undefined;
				jazzHandler.includeComponent(path, componentPath, cb, component, selector);
			}
		},
		"getProperty": function(propertyName, defaultValue, cb) {
			if (cb == undefined)
			{
				cb = defaultValue;
				defaultValue = "";
			}
			cb(component.resource.properties[propertyName] == undefined ? defaultValue : component.resource.properties[propertyName]);
		},
		"isAuthorized": function(type, path, cb) {

			let isAuthorized = false;
			let resource = component.resource;
			if (cb == undefined)
			{
				cb = path;
				path = component.resource.path;
			}

			let evaluateResourceIsAuthorized = function(resource) {
				cb(resource.isAuthorized(type));
			};

			if (path != component.resource.path)
			{
				component.req.session.resolve(path).then(evaluateResourceIsAuthorized).fail(function(err){
					logger.error("Error while resolving resource '"+ path +"' because of: " + err.toString());
					cb(false);
				});
			}
			else
			{
				evaluateResourceIsAuthorized(component.resource);
			}
		},
		"isLastElement": function(array, element) {
			if (array instanceof Array)
			{
				let lastElementMatches = array[array.length - 1] == element;
				return lastElementMatches;
			}

			return false;
		},
		"isNot": function(boolean) {
			return boolean != undefined && !boolean;
		},
		"isDefined": function(element) {
			return element != undefined;
		},
		"isUndefined": function(element) {
			return element == undefined;
		},
		"toJson": function(object, cb) {
			if (cb == undefined)
			{
				return JSON.stringify(object);
			}
			else
			{
				cb(JSON.stringify(object));
			}
		},
		"escape": function(value, cb) {
			if (cb == undefined)
			{
				return escape(value);
			}
			else
			{
				cb(escape(value));
			}
		},
		"includeScript": function(scriptFilenamename, parameter, cb) {
			if (cb == undefined)
			{
				cb = parameter;
			}
			jazzHandler.includeScript(scriptFilenamename, cb, component, parameter);
		},
		"nullReference": function() {
			return null;
		},
		"properties": component.resource.properties,
		"component": component,
		"resource": component.resource,
		"pathInfo": component.pathInfo,
		"parameter": parameter
	};

	try
	{
		let template = jazz.compile(jazzTemplate);

		template.eval(templateParameters, function(data) {
			deferred.resolve(data);
		});
	} catch (err)
	{
		deferred.reject(err);
	}

	return deferred.promise
};

jazzHandler.includeComponent = function(resourcePath, componentPath, cb, component, selector) {
	if (resourcePath != null && resourcePath.path != undefined)
	{
		resourcePath = resourcePath.path;
	}

	dispatcher.dispatchComponent(resourcePath, componentPath, component, selector).then(cb).fail(function(err) {
		let errorMessage = "Error while including component '" + componentPath + "' with resource path '" + resourcePath + "' >> " + err;
		logger.error(errorMessage);
		cb(errorMessage);
	});
};

jazzHandler.includeScript = function(scriptFilename, cb, component, parameter) {
	let scriptName = scriptFilename.lastSubstringBefore(".");
	let scriptExtension = scriptFilename.lastSubstringAfter(".");
	component.executeScript(scriptName, scriptExtension, parameter).then(cb).fail(function(err) {
		let errorMessage = "Error while including script '" + scriptFilename + "' within component '" + component.componentResource.path + "' >> " + err;
		logger.error(errorMessage);
		cb(errorMessage);
	});
};
