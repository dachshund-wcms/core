'use strict';

const stringUtils = require('string-utils');
const ResourceTypes = require('resource-types');

class Resource {

	/**
	 * Resource is an element of hierarchical structure. It has one parent resource and may have multiple child
	 * resources. Furthermore a resource can contain files and properties which can be accessed or modified. The ID
	 * of each resource is represented by it's path and can be referenced trough it.
	 */
	constructor() {

		/**
		 * Name of the resource
		 * @type {String}
		 */
		this.name = null;

		/**
		 * Path to the resource in the repository (e.g. '/content/myPage/.content/comments/commentA')
		 * @type {String}
		 */
		this.path = null;

		/**
		 * Properties of the resource represented as a unstructured object
		 * @type {object}
		 */
		this.properties = null;

		/**
		 * Properties which represent the access rights to this resource
		 * @type {object}
		 */
		this.auth = null;

		/**
		 * Type of the resource which can be
		 * - a resource
		 * - a file
		 * - not found
		 * @type {ResourceTypes}
		 */
		this.type = ResourceTypes.NOT_FOUND;

		// Internal attribute to cache files which are resolved only the first time when they're requested
		this._resourceFiles = null;
	}

	/**
	 * The level on which the path of the resource is located
	 *
	 * - The root node has the depth of 0
	 * - The first level of child nodes has the depth 1
	 * - The path '/path/to/my/resource' has the depth 4
	 *
	 * @returns {number} the depth of this resource as a integer
	 */
	get depth() {
		let resourceDepth = 0;
		if (stringUtils.isNotEmpty(this.path))
		{
			resourceDepth = this.path.split("/").length;
		}
		return resourceDepth;
	}

	/**
	 * Reads a property which belong to the resource
	 * @param {String} name name of the property which shall be read
	 * @param {*} [defaultValue] will be return in the case that the property isn't defined
	 * @returns {*} the value of the property or the default value when it's defined and the property isn't set
	 */
	getProperty(name, defaultValue) {
		let value = defaultValue;
		if (this.properties[name] != undefined)
		{
			value = this.properties[name];
		}

		return value;
	}

	/**
	 * Provides a list of files which belong to this resource
	 * @param {boolean} [includeHiddenFiles] - true: hidden files, starting with a dot (e.g. '.hiddenFile') will be included; false - otherwise (default)
	 * @returns {promise} resolves with a list of files {@link string[]} which belong to this resource
	 */
	async getFiles(includeHiddenFiles) {
		return [];
	}

	/**
	 * Checks weather a files exists or not
	 * @param filename - name of the file to be checked
	 * @returns {promise} resolves with {@link true} when the file exists and {@link false} otherwise
	 */
	async fileExists(filename) {
		return false;
	}

	/**
	 * Checks weather a file exists or not and deletes it in case it exists
	 * @param {String} filename - name of the file to be deleted
	 * @returns {Promise} resolves with {@link true} when the file existed and is deleted; {@link false} when the file didn't existed
	 */
	async deleteFile(filename) {
		return false;
	}

	/**
	 * Deletes all files from this resource
	 * @param includeHiddenFiles [includeHiddenFiles] - true: hidden files, starting with a dot (e.g. '.hiddenFile') will be included; false - otherwise (default)
	 * @returns {promise}
	 */
	async deleteAllFiles(includeHiddenFiles) {
		return false;
	}

	/**
	 * Adds a file to the resource
	 * @param sourceReadStream - stream to fill the file content
	 * @param {String} filename - sets the name of the file
	 * @returns {Promise} resolves when the file is added to the resource
	 */
	async addFile(sourceReadStream, filename) {
		throw new Error('Called from abstract base class');
	}

	/**
	 * Loads a script from the resource with the node.js require method
	 * @param {String} scriptName - name of the script to loaded
	 * @returns {Promise} resolves with the loaded script
	 */
	async loadScript(scriptName) {
		throw new Error('Called from abstract base class');
	}

	/**
	 * Provides a list of childs belonging to this resource
	 * @returns {Promise} resolves with a list {@link string[]} of childs belonging to this resource
	 */
	async getChilds(includeHidden) {
		return [];
	}

	/**
	 * Provides a list of childs resources belonging to this resource
	 * @returns {Promise} resolves with a list {@link Resource[]} of child resources belonging to this resource
	 */
	async getChildResources(includeHidden) {
		return [];
	}

	/**
	 * Provides the parent resource of this resource
	 * @returns {promise} resolves with the {@link Resource} which represents the parent of this resource
	 */
	async getParentResource() {
		return new Resource();
	}

	/**
	 * Provides an absolute parent of this resource
	 * @param {number} depth - number of depth of the requested parent resource; the number has be greate then 0 and smaller then it's own depth
	 * @returns {promise} resolves with the {@link Resource} which represents the absolute parent of this resource
	 */
	async getAbsoluteParentResource(depth) {
		return new Resource();
	}

	/**
	 * Provides a list of all hidden child nodes represented as a {@link Resource}. To be a hidden child node the
	 * child node name has to start with a dot (e.g. '.hiddenChildNode')
	 * @returns {promise} resolves with a list {@link Resource[]} of child resources belonging to this resource
	 */
	async getHiddenResourceChilds() {
		return [];
	}

	/**
	 * Loads ths properties of this resource which can be access through the member {@link properties}
	 * @returns {promise} resolves when the properties are loaded
	 */
	async loadProperties() {
		return this.properties;
	}

	/**
	 * Persists changes which were made to the class member {@link properties}
	 * @returns {promise} resolves when the properties are saved
	 */
	async saveProperties() {
		return this;
	}

	/**
	 * Loads the authorization properties which define the access rights to this resource.
	 * @returns {promise} resolves when the authorization properties are loaded
	 */
	async loadAuthorization() {
		return this.auth;
	}

	/**
	 * Persists changes which were made to the class member {@link auth}
	 * @returns {promise} resolves when the authorization properties are saved
	 */
	async saveAuthorization() {
		return this;
	}

	/**
	 * Provides the data of this resource
	 * @returns {{name: string, path: string, depth: number, properties: Object, auth: Object}}
	 */
	getData() {
		return {
			name: this.name, path: this.path, depth: this.depth, properties: this.properties, auth: this.auth
		}
	}
}

module.exports = Resource;